<?php
/**
 * @file
 * A module that allows users to create and order custom business cards.
 */

/**
 * Implements hook_help().
 */
function card_creator_help($path, $arg) {
  switch ($path) {
    case 'admin/help#card_creator':{
      $ret_val = '<h3>' . t('About') . '</h3>';
      $ret_val .= '<p>' . t('Allows customers to create and order custom business cards.') . '</p>';
      return $ret_val;
      break;
    }
  }
}

/**
 * Implements hook_permission().
 */
function card_creator_permission() {
  return array(
    'administer card creator' => array(
      'title' => t('Administer Card Creator'),
      'description' => t('Perform administrative task on Card Creator functionality.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function card_creator_menu() {
  $items = array();

  // Business card creation page
  $items['card-creator'] = array(
    'description' => 'Customize your business card.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('card_creator_form'),
    'access callback' => TRUE,
  );

  // Create page for ajax front callback
  $items['card-creator-ajax-front'] = array(
    'title' => t('Card Creator AJAX front'),
    'type' => MENU_CALLBACK,
    'page callback' => 'card_creator_ajax_front',
    'access arguments' => array('access content'),
  );

  // Create page for ajax back callback
  $items['card-creator-ajax-back'] = array(
    'title' => t('Card Creator AJAX back'),
    'type' => MENU_CALLBACK,
    'page callback' => 'card_creator_ajax_back',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implement the card_creator_ajax_front callback.
 *
 * Saves an image of the front of the business card the user has created.
 */
function card_creator_ajax_front() {
  // Define the file directory to be used for storing users business cards.
  define('UPLOAD_DIR', 'sites/default/files/tmp/');

  // Get the svg.toDataUrl thats being passed via AJAX
  $img = $_POST['img'];
  // Get the Company Name for the card being created
  $company_name = $_POST['company_name'];
  $company_name = str_replace(' ', '', $company_name); // Removes all spaces
  $company_name = preg_replace('/[^A-Za-z0-9\-]/', '', $company_name); // Removes special chars
  // Get the Name of the customer the card is being created for
  $name = $_POST['name'];
  $name = str_replace(' ', '', $name); // Removes all spaces
  $name = preg_replace('/[^A-Za-z0-9\-]/', '', $name); // Removes special chars
  // Prepare dataURL to be saved as a file
  $img = str_replace('data:image/svg+xml;base64,', '', $img);
  $img = str_replace(' ', '+', $img);
  $data = base64_decode($img);

  $filename = $company_name . '-' . $name;

  // Save svg
  $file = UPLOAD_DIR . $filename . '.svg';
  $success = file_put_contents($file, $data);

  // Create low res PNG for display
  $ext_display = '.png';
  $filepath_display = UPLOAD_DIR . $filename . $ext_display;
  exec('convert -background none ' . $file . ' ' . $filepath_display);
  echo $filepath_display;

  // Create Print Ready PDF
  $ext_print = '.pdf';
  $filepath_print = UPLOAD_DIR . $filename . $ext_print;
  exec('convert -density 350 ' . $file . ' -scale 1225 -colorspace CMYK ' . $filepath_print);
}

/**
 * Implement the card_creator_ajax_front callback.
 *
 * Saves an image of the front of the business card the user has created.
 */
function card_creator_ajax_back() {
  // Define the file directory to be used for storing users business cards.
  define('UPLOAD_DIR', 'sites/default/files/tmp/');

  // Get the svg.toDataUrl thats being passed via AJAX
  $img = $_POST['img'];
  // Get the Company Name for the card being created
  $company_name = $_POST['company_name'];
  $company_name = str_replace(' ', '', $company_name); // Removes all spaces
  $company_name = preg_replace('/[^A-Za-z0-9\-]/', '', $company_name); // Removes special chars
  // Get the Name of the customer the card is being created for
  $name = $_POST['name'];
  $name = str_replace(' ', '', $name); // Removes all spaces
  $name = preg_replace('/[^A-Za-z0-9\-]/', '', $name); // Removes special chars
  // Prepare dataURL to be saved as a file
  $img = str_replace('data:image/svg+xml;base64,', '', $img);
  $img = str_replace(' ', '+', $img);
  $data = base64_decode($img);

  $filename = $company_name . '-' . $name . '-back';

  // Save svg
  $file = UPLOAD_DIR . $filename . '.svg';
  $success = file_put_contents($file, $data);

  // Create low res PNG for display
  $ext_display = '.png';
  $filepath_display = UPLOAD_DIR . $filename . $ext_display;
  exec('convert -background none ' . $file . ' ' . $filepath_display);
  echo $filepath_display;

  // Create Print Ready PDF
  $ext_print = '.pdf';
  $filepath_print = UPLOAD_DIR . $filename . $ext_print;
  exec('convert -density 350 ' . $file . ' -scale 1225 -colorspace CMYK ' . $filepath_print);
}

/**
 * Implements hook_form().
 */
function card_creator_form($form, &$form_state) {
  $form = array();

  // Attach css, js, and library files
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'card_creator') . '/css/styles.css',
  );

  // Title displayed above card creator form
  $form['card_creator_info'] = array(
    '#markup' => '<h1>' . t('Custom Business Card Creator') . '</h1>' . '<p>' . t('** For The Best Experience Please Use Either Google Chrome or Mozilla Firefox Browsers **') . '</p>',
    '#prefix' => '<div id="card_creator_header" class="rlc-header">',
    '#suffix' => '</div>',
  );

  // Input Fields for Front
  $form['card_information'] = array(
    '#markup' => '<h4>' . t('1) Enter Card Information') . '</h4>',
    '#prefix' => '<div id="container"><div id="leftColumn"><div id="cardInfoFront">',
  );
  $form['company_name'] = array(
    '#type' => 'textfield',
    '#id' => 'companyName',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Company Name'),
    ),
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#id' => 'name',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Name'),
    ),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#id' => 'title',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Title'),
    ),
  );
  $form['line1'] = array(
    '#type' => 'textfield',
    '#id' => 'line1',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Phone 1'),
    ),
  );
  $form['line2'] = array(
    '#type' => 'textfield',
    '#id' => 'line2',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Phone 2'),
    ),
  );
  $form['line3'] = array(
    '#type' => 'textfield',
    '#id' => 'line3',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => ('Fax #'),
    ),
  );
  $form['line4'] = array(
    '#type' => 'textfield',
    '#id' => 'line4',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => ('Cell #'),
    ),
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#id' => 'email',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Email'),
    ),
  );
  $form['website'] = array(
    '#type' => 'textfield',
    '#id' => 'website',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Website'),
    ),
  );
  $form['address'] = array(
    '#type' => 'textfield',
    '#id' => 'address',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Street Address'),
    ),
  );
  $form['city_state_zip'] = array(
    '#type' => 'textfield',
    '#id' => 'cityStateZip',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('City, State Zip'),
    ),
    '#suffix' => '</div>',
  );

  // Input Fields for Back

  $form['card_information_back'] = array(
    '#markup' => '<h4>' . t('1) Enter Card Information') . '</h4>',
    '#prefix' => '<div id="cardInfoBack">',
  );
  $form['back_line_1'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine1',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 1'),
    ),
  );
  $form['back_line_2'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine2',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 2'),
    ),
  );
  $form['back_line_3'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine3',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 3'),
    ),
  );
  $form['back_line_4'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine4',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 4'),
    ),
  );
  $form['back_line_5'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine5',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 5'),
    ),
  );
  $form['back_line_6'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine6',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 6'),
    ),
  );
  $form['back_line_7'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine7',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => t('Line 7'),
    ),
  );
  $form['back_line_8'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine8',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => ('Line 8'),
    ),
  );
  $form['back_line_9'] = array(
    '#type' => 'textfield',
    '#id' => 'backLine9',
    '#size' => 25,
    '#attributes' => array(
      'placeholder' => ('Line 9'),
    ),
    '#suffix' => '</div>',
  );

  // Font Family Select List
  $form['font_family'] = array(
    '#markup' => 'Select Font Family <select id="docFontFamily" title="Change the font for ALL fields."><option value="Helvetica">Helvetica</option><option value="BrushScript BT">BrushScript</option><option value="Comic Sans MS">Comic Sans</option><option value="Souvenir">Souvenir</option><option value="Times">Times</option></select>',
    '#suffix' => '</div>',
  );

  $form['two_sided_options'] = array(
    '#prefix' => '<div id="midColumn"><div id="twoSidedOptions">',
    '#markup' => '<button id="addBack" type="button">Add a Back</button><button id="removeBack" type="button">Remove Back</button>',
    '#suffix' => '</div>',
  );
  $form['two_sided'] = array(
    '#type' => 'checkbox',
    '#title' => t('Two Sided Card?'),
    '#prefix' => '<div id="selectTwoSided">',
    '#suffix' => '</div>',
  );
  // Two Sided Options
  $form['front_back'] = array(
    '#prefix' => '<div id="frontBack">',
    '#markup' => '<button id="front" type="button">Front</button><button id="back" type="button">Back</button>',
    '#suffix' => '</div>',
  );
  // Preview svg
  $form['previewFront'] = array(
    '#markup' => '<svg id="previewFront"></svg>',
  );
  $form['previewBack'] = array(
    '#markup' => '<svg id="previewBack"></svg>',
    '#suffix' => '</div>',
  );


  // Template Selection
  $form['select_template'] = array(
    '#markup' => '<h4>' . t('2) Select a Template') . '</h4>',
    '#prefix' => '<div id="rightColumn">',
  );

  // Templates svg displays
  $form['templates_front'] = array(
    '#markup' => '<svg id="templatesFront"></svg>',
    '#prefix' => '<div id="rightColumnlower"><div id="templatesFrontDisplay">',
    '#suffix' => '</div>',
  );
  $form['templates_back'] = array(
    '#markup' => '<svg id="templatesBack"></svg>',
    '#prefix' => '<div id="templatesBackDisplay">',
    '#suffix' => '</div></div></div>',
  );
  // Clipart selection
  $form['select_clipart'] = array(
    '#markup' => '<h4>' . t('3) Select Clipart') . '</h4>',
    '#prefix' => '<div id="bottom"><div id="bottomColOne"><div id="bottomColOneUpper">',
    '#suffix' => '</div>',
  );
  // Clipart Color Label
  $form['clipart_color'] = array(
    '#markup' => '<div><h5 id="clipartColor">' . t('Clipart Color') . '</h5></div>',
  );
  // Clipart Category
  $form['clipart_category'] = array(
    '#markup' => '<select id="clipartCategory" title="Select Clipart Category."><option value="animals">Animals</option><option value="construction">Construction</option><option value="furniture">Furniture & Antiques</option><option value="healthcare">Healthcare</option><option value="jewelry">Jewelry</option><option value="lawn">Lawn & Garden</option><option value="legal">Legal</option><option value="manufacturer">Manufacturer Logos</option><option value="miscellaneous">Miscellaneous</option><option value="real_estate">Real Estate</option><option value="religion">Religion</option><option value="sports_recreation">Sports & Recreation</option><option value="vehicles">Vehicles</option><option value="weddings">Weddings</option></select>',
    '#prefix' => '<div id="clipart_category">',
    '#suffix' => '</div>',
  );

  // Clipart svg dispaly
  $form['clipart'] = array(
    '#markup' => '<svg id="clipart"></svg>',
    '#prefix' => '<div id="bottomColOneLower">',
    '#suffix' => '</div></div>',
  );

  // Ink Color Selection
  $form['select_ink_color'] = array(
    '#markup' => '<h4>' . t('4) Select Ink Color') . '</h4>',
    '#prefix' => '<div id="bottomColTwo"><div id="bottomColTwoUpper">',
    '#suffix' => '</div>',
  );

  // Store Info for Color selections
  $form['one_color_selection'] = array(
    '#type' => 'textfield',
    '#id' => 'oneColorSelection',
  );
  $form['two_color'] = array(
    '#type' => 'checkbox',
    '#title' => t('Two Color?'),
    '#prefix' => '<div id="selectTwoColor">',
    '#suffix' => '</div>',
  );
  $form['two_color_selection'] = array(
    '#type' => 'textfield',
    '#id' => 'twoColorSelection',
  );
  $form['back_color_selection'] = array(
    '#type' => 'textfield',
    '#id' => 'backColorSelection',
  );

  // One Color Options
  $form['black'] = array(
    '#markup' => '<button id="18" type="button">Black</button>',
    '#prefix' => '<div id="bottomColTwoLower"><div id="oneColor">',
  );
  $form['red'] = array(
    '#markup' => '<button id="19" type="button">Red</button>',
  );
  $form['blue'] = array(
    '#markup' => '<button id="20" type="button">Blue</button>',
  );
  $form['maroon'] = array(
    '#markup' => '<button id="21" type="button">Maroon</button>',
  );
  $form['green'] = array(
    '#markup' => '<button id="22" type="button">Green</button>',
  );
  $form['brown'] = array(
    '#markup' => '<button id="23" type="button">Brown</button>',
    '#suffix' => '</div>',
  );

  // Two Color Options
  $form['red_blue'] = array(
    '#markup' => '<button id="26" type="button">Red/Blue</button>',
    '#prefix' => '<div id="twoColors">',
  );
  $form['red_black'] = array(
    '#markup' => '<button id="27" type="button">Red/Black</button>',
  );
  $form['blue_black'] = array(
    '#markup' => '<button id="28" type="button">Blue/Black</button>',
  );
  $form['maroon_black'] = array(
    '#markup' => '<button id="29" type="button">Maroon/Black</button>',
  );
  $form['green_black'] = array(
    '#markup' => '<button id="30" type="button">Green/Black</button>',
  );
  $form['brown_black'] = array(
    '#markup' => '<button id="31" type="button">Brown/Black</button>',
    '#suffix' => '</div>'
  );

  // Back Color Options
  $form['back_black'] = array(
    '#markup' => '<button id="32" type="button">Black</button>',
    '#prefix' => '<div id="backColor">'
  );
  $form['back_blue'] = array(
    '#markup' => '<button id="33" type="button">Blue</button>',
  );
  $form['back_red'] = array(
    '#markup' => '<button id="34" type="button">Red</button>',
    '#suffix' => '</div></div></div>'
  );

  // Card Stock Selection
  $form['card_stock'] = array(
    '#markup' => '<h4>' . t('5) Chose Card Stock') . '</h4>',
    '#prefix' => '<div id="bottomColThree"><div id="bottomColThreeUpper">',
    '#suffix' => '</div>',
  );
  // Build Card Stock Options
  $card_stocks = array(
    '1' => t('White Smooth'),
    '2' => t('White Linen'),
    '3' => t('Soft White Linen'),
    '4' => t('Tan Linen'),
    '5' => t('Gray Linen'),
    '6' => t('Yellow'),
    '7' => t('Kromekote'),
    '8' => t('Woodgrain'),
  );
  // Display Card Stock Options
  $form['card_stock_options'] = array(
    '#type' => 'radios',
    '#prefix' => '<div id="bottomColThreeLower">',
    '#options' => $card_stocks,
    '#default_value' => '1',
    '#suffix' => '</div></div>',
  );

  // Qunatity
  $form['qunatity'] = array(
    '#markup' => '<h4>' . t('6) Print Type & Quantity') . '</h4>',
    '#prefix' => '<div id="bottomColFour"><div id="bottomColFourUpper">',
    '#suffix' => '</div>',
  );
  // Build Print Type Options
  $print_types = array(
    '35' => t('Raised Letter'),
    '36' => t('Full Color'),
    '37' => t('Magnetic'),
  );
  // Build Quantity Options
  $quantitys = array(
    '9' => '500',
    '10' => '1000',
    '11' => '2000',
    '12' => '3000',
    '13' => '4000',
    '14' => '5000',
    '15' => '10000',
  );
  $form['select_print_type'] = array(
    '#type' => 'radios',
    '#options' => $print_types,
    '#default_value' => '35',
    '#prefix' => '<div id="bottomColFourLower"><div id="select_print_type">',
    '#suffix' => '</div>',
  );
  // Display Quantity Options
  $form['select_quantity'] = array(
    '#type' => 'select',
    '#options' => $quantitys,
    '#default_value' => '9',
    '#prefix' => '<div id="select_quantity">',
    '#suffix' => '</div>',
  );
  // Price
  $form['current_price'] = array(
    '#markup' => t('Price = $14.95'),
    '#prefix' => '<div id="continue"><div id="currentPrice">',
    '#suffix' => '</div>',
  );
  // Continue
  $form['continue'] = array(
    '#markup' => '<button id="continue_button">Continue</button>',
    '#suffix' => '</div></div></div></div>',
  );

  // Create div for proof
  $form['proof'] = array(
    '#markup' => '<img id="proofImageFront"></img><img id="proofImageBack"></img>',
    '#prefix' => '<div id="proof">',
  );

  $form['approve_proof'] = array(
    '#type' => 'checkbox',
    '#title' => ' I agree that this artwork is free from errors, and understand that RaisedLetterCards.com is not responsible for typo\'s.',
  );

  $form['edit'] = array(
    '#markup' => '<button id="edit">Edit</button>',
  );

  // Add To Cart
  $form['add_to_cart'] = array(
    '#type' => 'submit',
    '#id' => 'addToCart',
    '#value' => t('Add to cart'),
    '#suffix' => '</div>',
  );

  // Include libraries
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'card_creator') . '/libraries/snap.svg.js',
  );

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'card_creator') . '/libraries/svg_todataurl.js',
  );

  // Include js for card_creator functionality.
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'card_creator') . '/js/card_creator.js',
  );

  return $form;
}

/**
 * Validates Card Creator Form.
 */

function card_creator_form_validate($form, &$form_state) {

}

/**
 * Process a validated Card Creator Form submission.
 */

function card_creator_form_submit($form, &$form_state) {
  global $user;
  $user_name = isset($user->name) ? $user->name : 'Anonymous';
  // Set the product id for a one sided card
  $product_id = 1;

  $company_name = $form_state['values']['company_name'];
  $name = $form_state['values']['name'];
  $title = $form_state['values']['title'];
  $email = $form_state['values']['email'];
  $website = $form_state['values']['website'];
  $address = $form_state['values']['address'];
  $city_state_zip = $form_state['values']['city_state_zip'];
  $selected_print_type = $form_state['values']['select_print_type'];
  $line1 = $form_state['values']['line1'];
  $line2 = $form_state['values']['line2'];
  $line3 = $form_state['values']['line3'];
  $line4 = $form_state['values']['line4'];
  $color_selected = $form_state['values']['one_color_selection'];
  $colors_selected = $form_state['values']['two_color_selection'];
  $selected_card_stock = $form_state['values']['card_stock_options'];
  $selected_quantity = $form_state['values']['select_quantity'];
  $two_sided_card = $form_state['values']['two_sided'];
  $two_color_card = $form_state['values']['two_color'];

  // Back Side Fields
  $back_color_selected = $form_state['values']['back_color_selection'];
  $back_line1 = $form_state['values']['back_line_1'];
  $back_line2 = $form_state['values']['back_line_2'];
  $back_line3 = $form_state['values']['back_line_3'];
  $back_line4 = $form_state['values']['back_line_4'];
  $back_line5 = $form_state['values']['back_line_5'];
  $back_line6 = $form_state['values']['back_line_6'];
  $back_line7 = $form_state['values']['back_line_7'];
  $back_line8 = $form_state['values']['back_line_8'];
  $back_line9 = $form_state['values']['back_line_9'];

  // Generate info for file name
  $date = date('m-d-y');
  $private_file_path = 'private://' . $user_name . '/' . $date;
  $company_name = str_replace(' ', '', $company_name); // Removes all spaces
  $company_name = preg_replace('/[^A-Za-z0-9\-]/', '', $company_name); // Removes special chars
  $name = str_replace(' ', '', $name); // Removes all spaces
  $name = preg_replace('/[^A-Za-z0-9\-]/', '', $name); // Removes special chars

  // Proof Approval
  $approve_proof = $form_state['values']['approve_proof'];

  // if directory does not exist for user
  if (!file_exists($private_file_path)) {
    drupal_mkdir($private_file_path, 0775, TRUE);
  }

  // If the proof has been approved
  if ($approve_proof !== '0') {

    // First, see if there is already a cart for this user.
    if (module_exists('commerce_cart')) {
      $order = commerce_cart_order_load($user->uid);
    }
    if (empty($order)) {
      // Create the new order in checkout
      $order = commerce_order_new($user->uid, 'checkout_checkout');
      // Save the order to get its ID.
      commerce_order_save($order);
    }
    // Link anonymous user session to the cart
    if (!$user->uid) {
      commerce_cart_order_session_save($order->order_id);
    }

    // Save SVG Image for Front
    $filepath_front_svg = 'sites/default/files/tmp/'. $company_name . '-' . $name . '.svg';
    $file_front_svg = (object) array(
      'filename' => basename($filepath_front_svg),
      'filepath' => $filepath_front_svg,
      'filemime' => file_get_mimetype($filepath_front_svg),
      'filesize' => filesize($filepath_front_svg),
      'uid' => 1,
      'status' => FILE_STATUS_PERMANENT,
      'uri' => $filepath_front_svg,
      'display' => 1,
      'description' => '',
    );
    $file_front_svg = file_move($file_front_svg, $private_file_path, FILE_EXISTS_RENAME);

    // Save Print Image for Front
    $filepath_front_print = 'sites/default/files/tmp/'. $company_name . '-' . $name . '.pdf';
    $file_front_print = (object) array(
      'filename' => basename($filepath_front_print),
      'filepath' => $filepath_front_print,
      'filemime' => file_get_mimetype($filepath_front_print),
      'filesize' => filesize($filepath_front_print),
      'uid' => 1,
      'status' => FILE_STATUS_PERMANENT,
      'uri' => $filepath_front_print,
      'display' => 1,
      'description' => '',
    );
    $file_front_print = file_move($file_front_print, $private_file_path, FILE_EXISTS_RENAME);

    // Save Display Image for Front
    $filepath_front_display = 'sites/default/files/tmp/'. $company_name . '-' . $name . '.png';
    $file_front_display = (object) array(
      'filename' => basename($filepath_front_display),
      'filepath' => $filepath_front_display,
      'filemime' => file_get_mimetype($filepath_front_display),
      'filesize' => filesize($filepath_front_display),
      'uid' => 1,
      'status' => FILE_STATUS_PERMANENT,
      'uri' => $filepath_front_display,
      'display' => 1,
      'description' => '',
    );

    // Save Front
    $file_front_display = file_move($file_front_display, $private_file_path, FILE_EXISTS_RENAME);

    // If this is two a two sided card, save files for back

    if ($two_sided_card == 1) {
      // Set the product id for two sided card
      $product_id = 2;
      // Save SVG Image for Back
      $filepath_back_svg = 'sites/default/files/tmp/'. $company_name . '-' . $name . '-back' . '.svg';
      $file_back_svg = (object) array(
        'filename' => basename($filepath_back_svg),
        'filepath' => $filepath_back_svg,
        'filemime' => file_get_mimetype($filepath_back_svg),
        'filesize' => filesize($filepath_back_svg),
        'uid' => 1,
        'status' => FILE_STATUS_PERMANENT,
        'uri' => $filepath_back_svg,
        'display' => 1,
        'description' => '',
      );
      $file_back_svg = file_move($file_back_svg, $private_file_path, FILE_EXISTS_RENAME);

      // Save Print Image for Back
      $filepath_back_print = 'sites/default/files/tmp/'. $company_name . '-' . $name . '-back' . '.pdf';
      $file_back_print = (object) array(
        'filename' => basename($filepath_back_print),
        'filepath' => $filepath_back_print,
        'filemime' => file_get_mimetype($filepath_back_print),
        'filesize' => filesize($filepath_back_print),
        'uid' => 1,
        'status' => FILE_STATUS_PERMANENT,
        'uri' => $filepath_back_print,
        'display' => 1,
        'description' => '',
      );
      $file_back_print = file_move($file_back_print, $private_file_path, FILE_EXISTS_RENAME);

      // Save Display Image for Back
      $filepath_back_display = 'sites/default/files/tmp/'. $company_name . '-' . $name . '-back' . '.png';
      $file_back_display = (object) array(
        'filename' => basename($filepath_back_display),
        'filepath' => $filepath_back_display,
        'filemime' => file_get_mimetype($filepath_back_display),
        'filesize' => filesize($filepath_back_display),
        'uid' => 1,
        'status' => FILE_STATUS_PERMANENT,
        'uri' => $filepath_back_display,
        'display' => 1,
        'description' => '',
      );

      // Save Back
      $file_back_display = file_move($file_back_display, $private_file_path, FILE_EXISTS_RENAME);
    }

    // Load whatever product represents the item the customer will be
    // paying for and create a line item for it.
    $product = commerce_product_load($product_id);
    $line_item = commerce_product_line_item_new($product, 1, $order->order_id, array(), 'business_card');
    // Add the custom values to the line_item fields
    foreach ($line_item as $field_name => $value) {
      $line_item->field_quantity['und'][0]['tid'] = $selected_quantity;
      $line_item->field_print_type['und'][0]['tid'] = $selected_print_type;
      $line_item->field_card_stocks['und'][0]['tid'] = $selected_card_stock;
      $line_item->field_one_color_options['und'][0]['tid'] = $color_selected;
      $line_item->field_two_color_options['und'][0]['tid'] = $colors_selected;
      $line_item->field_company_name[LANGUAGE_NONE][0]['value'] = $company_name;
      $line_item->field_name[LANGUAGE_NONE][0]['value'] = $name;
      $line_item->field_title[LANGUAGE_NONE][0]['value'] = $title;
      $line_item->field_email[LANGUAGE_NONE][0]['value'] = $email;
      $line_item->field_website[LANGUAGE_NONE][0]['value'] = $website;
      $line_item->field_address[LANGUAGE_NONE][0]['value'] = $address;
      $line_item->field_city_state_zip[LANGUAGE_NONE][0]['value'] = $city_state_zip;
      $line_item->field_line_1[LANGUAGE_NONE][0]['value'] = $line1;
      $line_item->field_line_2[LANGUAGE_NONE][0]['value'] = $line2;
      $line_item->field_line_3[LANGUAGE_NONE][0]['value'] = $line3;
      $line_item->field_line_4[LANGUAGE_NONE][0]['value'] = $line4;
      $line_item->field_business_card_image['und'][0]['fid'] = $file_front_display->fid;
      $line_item->field_print_ready_front['und'][0]['fid'] = $file_front_print->fid;
      $line_item->field_svg_front['und'][0]['fid'] = $file_front_svg->fid;
      // If this is a two color card
      if ($two_color_card == 1) {
        $line_item->field_one_or_two_color['und'][0]['tid'] = 25; // 25 is the tid for Two Color taxonomy term
      }
      // If this is a two sided card
      if ($two_sided_card == 1) {
        $line_item->field_two_sided['und'][0]['tid'] = 16; // 16 is the tid for YES two sided taxonomy term        
        $line_item->field_back_color_options['und'][0]['tid'] = $back_color_selected;
        $line_item->field_back_line_1[LANGUAGE_NONE][0]['value'] = $back_line1;
        $line_item->field_back_line_2[LANGUAGE_NONE][0]['value'] = $back_line2;
        $line_item->field_back_line_3[LANGUAGE_NONE][0]['value'] = $back_line3;
        $line_item->field_back_line_4[LANGUAGE_NONE][0]['value'] = $back_line4;
        $line_item->field_back_line_5[LANGUAGE_NONE][0]['value'] = $back_line5;
        $line_item->field_back_line_6[LANGUAGE_NONE][0]['value'] = $back_line6;
        $line_item->field_back_line_7[LANGUAGE_NONE][0]['value'] = $back_line7;
        $line_item->field_back_line_8[LANGUAGE_NONE][0]['value'] = $back_line8;
        $line_item->field_back_line_9[LANGUAGE_NONE][0]['value'] = $back_line9;
        $line_item->field_business_card_image_back['und'][0]['fid'] = $file_back_display->fid;
        $line_item->field_print_ready_back['und'][0]['fid'] = $file_back_print->fid;
        $line_item->field_svg_back['und'][0]['fid'] = $file_back_svg->fid;
      }
    }
    // Save the line item to get its ID.
    commerce_line_item_save($line_item);
    // Add the line item to the order using the wrapper.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;
    // Save the order again to update its line item reference field.
    commerce_order_save($order);
    // Redirect to the order's checkout form.
    $form_state['redirect'] = 'cart';
  }
}
